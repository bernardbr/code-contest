namespace CodeContest.Core.Generics
{
    using System.Diagnostics;
    using System;
    using System.IO;

    /// <inheritdoc />
    public abstract class BaseExecutor : IExecutor
    {
        /// <summary>
        /// The instance of builder.
        /// </summary>
        protected readonly IBuilder builder;

        /// <summary>
        /// Initializes a new instance of <see cref="BaseExecutor" />.
        /// </summary>
        /// <param name="builder">The instance of builder.</param>
        protected BaseExecutor(IBuilder builder)
        {
            this.builder = builder;
        }

        /// <inheritdoc />
        public virtual bool Execute(string session, string code, int timeout, string input, out string output, out string message)
        {
            var success = this.builder.Build(session, code, out var binaryPath, out message);
            if (!success)
            {
                output = string.Empty;
                return false;
            }

            var startInfo = new ProcessStartInfo();
            startInfo.FileName = binaryPath;
            startInfo.UseShellExecute = false;
            startInfo.RedirectStandardInput = true;
            startInfo.RedirectStandardOutput = false;
            startInfo.RedirectStandardError = false;

            return this.Execute(session, startInfo, timeout, input, out output, out message);
        }

        /// <summary>
        /// Executes the process.
        /// </summary>
        /// <param name="session">The session that is building the code.</param>
        /// <param name="startInfo">The process that will be executed.</param>
        /// <param name="timeout">The timeout that the code needs to run.</param>
        /// <param name="input">The string represents the console input.</param>
        /// <param name="output">The output that was generated by code.</param>
        /// <param name="message">The validation message when the code fails.</param>
        /// <returns>The value that indicates if the code had success.</returns>
        protected bool Execute(string session, ProcessStartInfo startInfo, int timeout, string input, out string output, out string message)
        {
            output = string.Empty;
            var outputDir = $@"C:\Temp\Results\{session}\";
            if (!Directory.Exists(outputDir))
            {
                Directory.CreateDirectory(outputDir);
            }

            var outputFile = $@"{outputDir}result.txt";
            startInfo.EnvironmentVariables["OUTPUT_PATH"] = outputFile;
            using (var process = Process.Start(startInfo))
            {
                process.StandardInput.WriteLine(input);
                var finished = process.WaitForExit(timeout);
                if (!finished)
                {
                    process.Kill();
                    message = "The application won't ran in expected time.";
                    return false;
                }

                if (!File.Exists(outputFile))
                {
                    message = "No result file has been found.";
                    return false;
                }

                message = string.Empty;
                output = File.ReadAllText(outputFile);
                return true;
            }
        }
    }
}
